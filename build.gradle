plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
}

application {
    mainClass = 'org.github.tkachenkoas.createjira.CreateJiraAction'
}

jar {
    archiveBaseName = 'create-jira'
    archiveVersion = ''
    archiveClassifier = ''
    manifest {
        attributes(
                'Main-Class': 'org.github.tkachenkoas.createjira.CreateJiraAction'
        )
    }
}

shadowJar {
    archiveBaseName = 'create-jira-all'
    archiveVersion = ''
    archiveClassifier = ''
    manifest {
        attributes(
                'Main-Class': 'org.github.tkachenkoas.createjira.CreateJiraAction'
        )
    }
}

tasks.register('combineSources') {
    doLast {
        def srcDir = file('src')
        def targetFile = file('all_source_combined.txt')

        targetFile.text = '' // Create or clear the target file

        srcDir.eachFileRecurse { file ->
            if (file.isFile()) {
                def header = "/*\n * File: ${file.canonicalPath}\n */\n"
                targetFile << header
                targetFile << file.text
                targetFile << '\n'
            }
        }

        // Combine files from root project directory (non-recursively)
        def rootDir = file('.')
        rootDir.eachFile { file ->
            if (file.isFile()) {
                def header = "/*\n * File: ${file.canonicalPath}\n */\n"
                targetFile << header
                targetFile << file.text
                targetFile << '\n'
            }
        }

        println("All source files have been combined into ${targetFile}")
    }
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.22'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    testImplementation 'org.skyscreamer:jsonassert:1.5.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.mock-server:mockserver-junit-jupiter:5.15.0'
}

test {
    useJUnitPlatform()
}
